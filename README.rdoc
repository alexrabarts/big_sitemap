= BigSitemap

BigSitemap is a {Sitemap}[http://sitemaps.org] generator suitable for applications with greater than 50,000 URLs.  It splits large Sitemaps into multiple files, gzips the files to minimize bandwidth usage, supports increment updates, can be set up with just a few lines of code and is compatible with just about any framework.

BigSitemap is best run periodically through a Rake/Thor task.

  require 'big_sitemap'

  include Rails.application.routes.url_helpers # Allows access to Rails routes

  BigSitemap.generate(:url_options => {:host => 'example.com'}, :document_root => "#{APP_ROOT}/public") do
    # Add a static page
    add '/about'

    # Add some URLs from your Rails application
    Post.find(:all).each do |post|
      add post_path(post)
    end

    # Add some URLs with additional options
    Product.find(:all).each do |product|
      add product_path(product), :change_frequency => 'daily', :priority => 0.5
    end
  end

The code above will create a minimum of two files:

1. public/sitemaps/sitemap_index.xml.gz
2. public/sitemaps/sitemap.xml.gz

If your sitemaps grow beyond 50,000 URLs (this limit can be overridden with the <code>:max_per_sitemap</code> option), the sitemap files will be partitioned into multiple files (<code>sitemap_1.xml.gz</code>, <code>sitemap_2.xml.gz</code>, ...).

=== Framework-specific Classes

Use the framework-specific classes to take advantage of built-in shortcuts.

==== Rails

<code>BigSiteMapRails</code> deals with setting the <code>:document_root</code> and <code>:url_options</code> initialization options.

==== Merb

<code>BigSitemapMerb</code> deals with setting the <code>:document_root</code> initialization option.

== Install

Via gem:

  sudo gem install big_sitemap

== Advanced

=== Initialization Options

* <code>:url_options</code> -- hash with <code>:host</code>, optionally <code>:port</code> and <code>:protocol</code>
* <code>:base_url</code> -- string alternative to <code>:url_options</code>, e.g. <code>'https://example.com:8080/'</code>
* <code>:url_path</code> -- string path_name to sitemaps folder, defaults to <code>:document_path</code>
* <code>:document_root</code> -- string
* <code>:document_path</code> -- string document path for sitemaps, relative to :document_root, defaults to empty string (putting sitemap files in the document root directory)
* <code>:document_full</code> -- string absolute document path to generation folder - defaults to <code>:document_root/:document_path</code>
* <code>:max_per_sitemap</code> -- <code>50000</code>, which is the limit dictated by Google but can be less
* <code>:gzip</code> -- <code>true</code>
* <code>:ping_google</code> -- <code>true</code>
* <code>:ping_yahoo</code> -- <code>false</code>, needs <code>:yahoo_app_id</code>
* <code>:ping_bing</code> -- <code>false</code>
* <code>:ping_ask</code> -- <code>false</code>
* <code>:ping_yandex</code> -- <code>false</code>
* <code>:partial_update</code> -- <code>false</code>

=== Change Frequency, Priority and Last Modified

You can control "changefreq", "priority" and "lastmod" values for each record individually by passing them as optional arguments when adding URLs:

  add(product_path(product), {
    :change_frequency => 'daily',
    :priority         => 0.5,
    :last_modified    => product.updated_at
  })

=== Partial Update

If you enable <code>:partial_update</code>, the filename will include the id of the first entry.  This is perfect to update just the last file with new entries without the need to re-generate files being already there.  You must pass the entry's id in when adding the URL.  For example:

BigSitemap.generate(:base_url => 'http://example.com', :partial_update => true) do
  Widget.find_in_batches(:conditions => "id > #{get_last_id}").each do |widget|
    add widget_path(widget), :id => widget.id
  end
end

== TODO

Tests for framework-specific components.

== Credits

Thanks to Alastair Brunton and Harry Love, who's work provided a starting point for this library.

Thanks also to those who have contributed patches:

* Mislav MarohniÄ‡
* Jeff Schoolcraft
* Dalibor Nasevic
* Tobias Bielohlawek (http://www.rngtng.com)

== Copyright

Copyright (c) 2010 Stateless Systems (http://statelesssystems.com). See LICENSE for details.
